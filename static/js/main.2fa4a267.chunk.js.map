{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","props","react_default","a","createElement","className","value","onClick","Board","row","column","_this","this","Square_Square","key","items","_this2","map","renderSquare","_this3","game","renderRow","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getInitialState","solution","generateGame","generateArray","gameFinished","status","slice","reveal","isMine","setState","squares","inRange","expand","minimum","maximum","Math","round","random","Array","from","length","generatedMines","randomInRange","height","width","incrementSquare","src_Board","handleClick","ReactDOM","render","src_Game_0","document","getElementById"],"mappings":"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","file":"static/js/main.2fa4a267.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nexport default function Square(props) {\n  return (\n    <button\n      className={\"Square\"+(props.value === '*' ? ' mine' : (props.value !== null ? ' revealed number'+props.value : ''))}\n      onClick={props.onClick}\n    >\n      {props.value ? props.value : ''}\n    </button>\n  );\n};\n","import React, {Component} from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  renderSquare(row, column, value) {\n    return (\n      <Square\n        key={row + \"_\" + column}\n        value={value}\n        onClick={() => this.props.onClick(row, column)}\n      />\n    );\n  }\n\n  renderRow(row, items) {\n    return (\n      <div className=\"row\" key={row}>\n        {items.map((value, key) => this.renderSquare(row, key, value))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Board\">\n        {this.props.game.map((value, key) => this.renderRow(key, value))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport './Game.css';\nimport Board from './Board';\n\n//const height = 16;\n//const width = 16;\n//const mines = 51;\n\nconst height = 9;\nconst width = 9;\nconst mines = 10;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  getInitialState() {\n    return {\n      solution: this.generateGame(),\n      game: this.generateArray(null),\n      gameFinished: false,\n      status: 'ðŸ™‚',\n    };\n  }\n\n  handleClick(row, column) {\n    // TODO don't start losing :(\n    const game = this.state.game.slice();\n\n    if (this.state.gameFinished || game[row][column] !== null) {\n      return;\n    }\n\n    this.reveal(game, row, column);\n\n    const gameFinished = this.isMine(game, row, column);\n    const status = gameFinished ? 'ðŸ’€' : this.state.status;\n    this.setState({game: game, gameFinished: gameFinished, status: status});\n  }\n\n  reveal(squares, row, column) {\n    if (!this.inRange(row, column) || squares[row][column] !== null) {\n      return;\n    }\n\n    squares[row][column] = this.state.solution[row][column];\n\n    if (squares[row][column] === 0) {\n      this.expand(squares, row, column);\n    }\n  }\n\n  expand(squares, row, column) {\n    this.reveal(squares, row - 1, column);\n    this.reveal(squares, row + 1, column);\n    this.reveal(squares, row, column - 1);\n    this.reveal(squares, row, column + 1);\n    this.reveal(squares, row - 1, column - 1);\n    this.reveal(squares, row - 1, column + 1);\n    this.reveal(squares, row + 1, column + 1);\n    this.reveal(squares, row + 1, column - 1);\n  }\n\n  randomInRange(minimum, maximum) {\n    return Math.round(Math.random() * (maximum - minimum) + minimum);\n  }\n\n  generateArray(value) {\n    return Array.from({length: height}, () => Array.from({length: width}, () => value))\n  }\n\n  generateGame() {\n    const squares = this.generateArray(0);\n    let generatedMines = 0;\n    let row;\n    let column;\n\n    while (generatedMines < mines) {\n      row = this.randomInRange(0, height - 1);\n      column = this.randomInRange(0, width - 1);\n\n      if (!this.isMine(squares, row, column)) {\n        squares[row][column] = '*';\n        this.incrementSquare(squares, row - 1, column);\n        this.incrementSquare(squares, row + 1, column);\n        this.incrementSquare(squares, row, column - 1);\n        this.incrementSquare(squares, row, column + 1);\n        this.incrementSquare(squares, row - 1, column - 1);\n        this.incrementSquare(squares, row - 1, column + 1);\n        this.incrementSquare(squares, row + 1, column + 1);\n        this.incrementSquare(squares, row + 1, column - 1);\n        generatedMines++;\n      }\n    }\n\n    return squares;\n  }\n\n  incrementSquare(squares, row, column) {\n    if (this.inRange(row, column) && !this.isMine(squares, row, column)) {\n      squares[row][column] = squares[row][column] + 1;\n    }\n  }\n\n  isMine(squares, row, column) {\n    return squares[row][column] === '*';\n  }\n\n  inRange(row, column) {\n    return row >= 0\n      && column >= 0\n      && row < height\n      && column < width;\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"status\">\n          <button className=\"restart\" onClick={() => this.setState(this.getInitialState())}>\n            {this.state.status}\n          </button>\n        </div>\n        <Board\n          onClick={(row, column) => this.handleClick(row, column)}\n          game={this.state.game}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}
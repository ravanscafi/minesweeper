{"version":3,"sources":["Square.js","Board.js","Status.js","DifficultyLevel.js","Game.js","serviceWorker.js","index.js"],"names":["classMapping","C","M","F","W","null","symbolMapping","getClass","value","getSymbol","Square","props","react_default","a","createElement","className","concat","onClick","onContextMenu","onRightClick","renderRow","row","items","map","key","column","Square_Square","event","renderSquare","Board","gameFinished","style","gridTemplateColumns","width","game","Status","minesLeft","buttonStatus","time","DifficultyLevel","isSelected","label","role","aria-label","emoji","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getInitialState","minimum","maximum","Math","floor","random","squares","height","Array","from","length","pattern","navigator","vibrate","solution","symbol","rowKey","square","squareKey","isMine","maximumMines","flat","filter","sq","number","toString","padStart","setState","apply","arguments","undefined","stopTimer","generateArray","gameStarted","start","bestTimes","JSON","parse","localStorage","getItem","startTimer","slice","generateGame","checkStart","reveal","updateGameStatus","preventDefault","inRange","expand","setGameOver","thereAreRemainingMoves","getSolution","updateBestTime","currentRow","currentColumn","generatedMines","randomInRange","incrementMinesNearby","_this2","Date","now","timer","setInterval","clearInterval","newTime","assign","bestTime","getBestTimeKey","setItem","stringify","leftPad","_this3","Status_Status","restart","Board_Board","handleClick","handleRightClick","getBestTimeText","DifficultyLevel_DifficultyLevel","isGame","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_Game_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f25fad1f.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nconst classMapping = {\n  'C': 'emoji mine clicked',\n  'M': 'emoji mine',\n  'F': 'emoji flag',\n  'W': 'emoji wrong',\n  null: 'unrevealed',\n};\n\nconst symbolMapping = {\n  'C': '💣',\n  'M': '💣',\n  'F': '🚩',\n  'W': '❌',\n};\n\nconst getClass = value => classMapping[value] || 'revealed number' + value;\nconst getSymbol = value => symbolMapping[value] || (value ? value : null);\n\nexport default function Square(props) {\n  return (\n    <button\n      className={`Square ${getClass(props.value)}`}\n      onClick={props.onClick}\n      onContextMenu={props.onRightClick}\n    >\n      {getSymbol(props.value)}\n    </button>\n  );\n};\n","import React from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nconst renderSquare = (props, row, column, value) => {\n  return (\n    <Square\n      key={row + \"_\" + column}\n      value={value}\n      onClick={() => props.onClick(row, column)}\n      onRightClick={(event) => props.onRightClick(event, row, column)}\n    />\n  );\n};\n\nconst renderRow = (props, row, items) =>\n  items.map((value, key) => renderSquare(props, row, key, value));\n\nexport default function Board(props) {\n  return (\n    <div\n      className={'Board' + (props.gameFinished ? ' disabled' : '')}\n      style={{gridTemplateColumns: `repeat(${props.width}, 1fr)`}}\n    >\n      {props.game.map((value, key) => renderRow(props, key, value))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Status.css';\n\nexport default function Status(props) {\n  return (\n    <div className=\"status\">\n      <div className=\"lcd minesLeft\">{props.minesLeft}</div>\n      <button className=\"restart\" onClick={props.onClick}>\n        {props.buttonStatus}\n      </button>\n      <div className=\"lcd timer\">{props.time}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './DifficultyLevel.css';\n\nexport default function DifficultyLevel(props) {\n  return (\n    <button\n      className={'difficulty-level ' + (props.isSelected ? 'selected' : '')}\n      onClick={props.onClick}\n    >\n      {props.label}\n      <span role=\"img\" aria-label={props.label}>{props.emoji}</span>\n    </button>\n  );\n};\n","import React, {Component} from 'react';\nimport './Game.css';\nimport Board from './Board';\nimport Status from './Status';\nimport DifficultyLevel from './DifficultyLevel';\n\nconst EMOJI_OK = '🙂';\nconst EMOJI_GAME_OVER = '💀';\nconst EMOJI_WIN = '😎';\n\nclass Game extends Component {\n  static randomInRange(minimum, maximum) {\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n  }\n\n  static isMine(squares, row, column) {\n    return squares[row][column] === 'M';\n  }\n\n  static generateArray(height, width, value) {\n    return Array.from(\n      {length: height},\n      () => Array.from({length: width}, () => value)\n    )\n  }\n\n  static vibrate(pattern) {\n    return navigator.vibrate(pattern);\n  }\n\n  static getSolution(game, solution, symbol) {\n    return game.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) =>\n          Game.isMine(solution, rowKey, squareKey) ? symbol : solution[rowKey][squareKey]\n      )\n    );\n  }\n\n  static thereAreRemainingMoves(squares, maximumMines) {\n    return squares.flat().filter(\n      sq => (sq === null || sq === 'F')\n    ).length > maximumMines;\n  }\n\n  static leftPad(number) {\n    return number.toString().padStart(3, '0');\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  restart(...args) {\n    this.setState(this.getInitialState(...args));\n  }\n\n  getInitialState(height = 9, width = 9, maximumMines = 10) {\n    this.stopTimer();\n\n    return {\n      height: height,\n      width: width,\n      maximumMines: maximumMines,\n      minesLeft: maximumMines,\n      game: Game.generateArray(height, width, null),\n      solution: null,\n      gameStarted: false,\n      gameFinished: false,\n      buttonStatus: EMOJI_OK,\n      time: 0,\n      start: 0,\n      bestTimes: JSON.parse(localStorage.getItem('minesweeper:bestTimes')) || {},\n    };\n  }\n\n  checkStart() {\n    if (!this.state.gameStarted) {\n      this.startTimer();\n    }\n  }\n\n  handleClick(row, column) {\n    let game = this.state.game.slice();\n    let solution;\n\n    if (!this.state.solution) {\n      solution = this.generateGame(this.state.height, this.state.width, row, column, this.state.maximumMines);\n      this.setState({gameStarted: true, solution: solution});\n    } else {\n      solution = this.state.solution.slice();\n    }\n    this.checkStart();\n\n    if (this.state.gameFinished || game[row][column] !== null) {\n      return;\n    }\n\n    this.reveal(game, solution, row, column);\n\n    this.updateGameStatus(game, solution, row, column);\n  }\n\n  handleRightClick(event, row, column) {\n    let game = this.state.game.slice();\n    event.preventDefault();\n    this.checkStart();\n\n    let value = game[row][column];\n    if (this.state.gameFinished\n      || (value !== null && value !== 'F')) {\n      return;\n    }\n\n    game[row][column] = value ? null : 'F';\n    const minesLeft = this.state.minesLeft + (game[row][column] ? -1 : 1);\n    Game.vibrate(200);\n\n    this.setState({game, minesLeft});\n  }\n\n  reveal(game, solution, row, column) {\n    if (!this.inRange(row, column) || game[row][column] !== null) {\n      return;\n    }\n\n    game[row][column] = solution[row][column];\n\n    if (game[row][column] === 0) {\n      this.expand(game, solution, row, column);\n    }\n  }\n\n  expand(game, solution, row, column) {\n    this.reveal(game, solution, row - 1, column);\n    this.reveal(game, solution, row + 1, column);\n    this.reveal(game, solution, row, column - 1);\n    this.reveal(game, solution, row, column + 1);\n    this.reveal(game, solution, row - 1, column - 1);\n    this.reveal(game, solution, row - 1, column + 1);\n    this.reveal(game, solution, row + 1, column + 1);\n    this.reveal(game, solution, row + 1, column - 1);\n  }\n\n  updateGameStatus(game, solution, row, column) {\n    if (Game.isMine(game, row, column)) {\n      return this.setGameOver(game, solution, row, column);\n    }\n\n    const gameFinished = !Game.thereAreRemainingMoves(game, this.state.maximumMines);\n    const buttonStatus = gameFinished ? EMOJI_WIN : this.state.buttonStatus;\n    let minesLeft = this.state.minesLeft;\n\n    if (gameFinished) {\n      this.stopTimer();\n      game = Game.getSolution(game, solution, 'F');\n      minesLeft = 0;\n      Game.vibrate([300, 40, 300, 40, 300, 40, 300]);\n      this.updateBestTime(this.state.time || 1);\n    }\n\n    this.setState({game, gameFinished, buttonStatus, minesLeft});\n  }\n\n  setGameOver(game, solution, row, column) {\n    this.stopTimer();\n\n    game = game.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) => {\n          const isMine = Game.isMine(solution, rowKey, squareKey);\n          if (square === 'F') {\n            return isMine ? square : 'W';\n          }\n\n          return isMine ? 'M' : square;\n        }\n      )\n    );\n    Game.vibrate(800);\n    game[row][column] = 'C'; // differ clicked mine that led to game over\n\n    this.setState({\n      game,\n      gameFinished: true,\n      buttonStatus: EMOJI_GAME_OVER,\n    });\n  }\n\n  generateGame(height, width, currentRow, currentColumn, maximumMines) {\n    const game = Game.generateArray(height, width, 0);\n    let generatedMines = 0;\n    let row;\n    let column;\n\n    while (generatedMines < maximumMines) {\n      row = Game.randomInRange(0, height - 1);\n      column = Game.randomInRange(0, width - 1);\n\n      if (!Game.isMine(game, row, column) && !(currentRow === row && currentColumn === column)) {\n        game[row][column] = 'M';\n        this.incrementMinesNearby(game, row - 1, column);\n        this.incrementMinesNearby(game, row + 1, column);\n        this.incrementMinesNearby(game, row, column - 1);\n        this.incrementMinesNearby(game, row, column + 1);\n        this.incrementMinesNearby(game, row - 1, column - 1);\n        this.incrementMinesNearby(game, row - 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column - 1);\n        generatedMines++;\n      }\n    }\n\n    return game;\n  }\n\n  incrementMinesNearby(game, row, column) {\n    if (this.inRange(row, column) && !Game.isMine(game, row, column)) {\n      game[row][column] = game[row][column] + 1;\n    }\n  }\n\n  inRange(row, column) {\n    return row >= 0 && row < this.state.height\n      && column >= 0 && column < this.state.width;\n  }\n\n  startTimer() {\n    this.setState({\n      gameStarted: true,\n      time: 1,\n      start: Date.now(),\n    });\n    if (this.timer) {\n      this.stopTimer();\n    }\n    this.timer = setInterval(() => this.setState({\n      time: Math.floor((Date.now() - this.state.start) / 1000) + 1,\n    }), 1);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  updateBestTime(newTime) {\n    const bestTimes = Object.assign({}, this.state.bestTimes);\n    const bestTime = bestTimes[this.getBestTimeKey()] || null;\n    if (bestTime === null || newTime < bestTime) {\n      bestTimes[this.getBestTimeKey()] = newTime;\n      localStorage.setItem('minesweeper:bestTimes', JSON.stringify(bestTimes));\n      this.setState({bestTimes});\n    }\n  }\n\n  getBestTimeText() {\n    const bestTime = this.state.bestTimes[this.getBestTimeKey()] || null;\n    return bestTime !== null ? 'Best time: ' + Game.leftPad(bestTime) : '';\n  }\n\n  getBestTimeKey() {\n    return `${this.state.height},${this.state.width},${this.state.maximumMines}`;\n  }\n\n  isGame(height, width, maximumMines) {\n    return this.state.height === height\n      && this.state.width === width\n      && this.state.maximumMines === maximumMines;\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"wrapper\">\n          <Status\n            buttonStatus={this.state.buttonStatus}\n            minesLeft={Game.leftPad(this.state.minesLeft)}\n            time={Game.leftPad(this.state.time)}\n            onClick={() => this.restart(this.state.height, this.state.width, this.state.maximumMines)}\n          />\n        </div>\n        <Board\n          onClick={(row, column) => this.handleClick(row, column)}\n          onRightClick={(event, row, column) => this.handleRightClick(event, row, column)}\n          game={this.state.game}\n          gameFinished={this.state.gameFinished}\n          width={this.state.width}\n        />\n        <div className=\"bestScore\">{this.getBestTimeText()}</div>\n        <div className=\"difficulty\">\n          <DifficultyLevel\n            isSelected={this.isGame(9, 9, 10)}\n            onClick={() => this.restart(9, 9, 10)}\n            label=\"Beginner\"\n            emoji=\"👶\"\n          />\n          <DifficultyLevel\n            isSelected={this.isGame(16, 16, 40)}\n            onClick={() => this.restart(16, 16, 40)}\n            label=\"Intermediate\"\n            emoji=\"🧑\"\n          />\n          <DifficultyLevel\n            isSelected={this.isGame(16, 30, 99)}\n            onClick={() => this.restart(16, 30, 99)}\n            label=\"Expert\"\n            emoji=\"🧓\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Game is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game/>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}
{"version":3,"sources":["Square.js","Board.js","Status.js","Game.js","serviceWorker.js","index.js"],"names":["getClass","value","Square","props","react_default","a","createElement","className","concat","onClick","onContextMenu","onRightClick","renderRow","row","items","key","map","column","Square_Square","event","renderSquare","Board","game","leftPad","number","toString","padStart","Status","minesLeft","buttonStatus","time","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","height","width","maximumMines","state","getInitialState","minimum","maximum","Math","floor","random","squares","Array","from","length","solution","symbol","rowKey","square","squareKey","isMine","flat","filter","sq","stopTimer","generateGame","generateArray","gameFinished","gameStarted","start","bestTime","localStorage","getItem","startTimer","slice","checkStart","reveal","updateGameStatus","preventDefault","setState","inRange","expand","_this2","thereAreRemainingMoves","getSolution","setItem","generatedMines","randomInRange","incrementMinesNearby","_this3","Date","now","timer","setInterval","clearInterval","_this4","Status_Status","Board_Board","handleClick","handleRightClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_Game_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3ab0727.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nconst getClass = value =>\n  value === '*' ? 'mine' : (value !== null ? 'revealed number'+value : 'unrevealed');\n\nexport default function Square(props) {\n  return (\n    <button\n      className={`Square ${getClass(props.value)}`}\n      onClick={props.onClick}\n      onContextMenu={props.onRightClick}\n    >\n      {props.value ? props.value : ''}\n    </button>\n  );\n};\n","import React from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nconst renderSquare = (props, row, column, value) => {\n  return (\n    <Square\n      key={row + \"_\" + column}\n      value={value}\n      onClick={() => props.onClick(row, column)}\n      onRightClick={(event) => props.onRightClick(event, row, column)}\n    />\n  );\n};\n\nconst renderRow = (props, row, items) => {\n  return (\n    <div className=\"row\" key={row}>\n      {items.map((value, key) => renderSquare(props, row, key, value))}\n    </div>\n  );\n};\n\nexport default function Board(props) {\n  return (\n    <div className=\"Board\">\n      {props.game.map((value, key) => renderRow(props, key, value))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Status.css';\n\nconst leftPad = number => number.toString().padStart(3, '0');\n\nexport default function Status(props) {\n  return (\n    <div className=\"status\">\n      <div className=\"lcd minesLeft\">{leftPad(props.minesLeft)}</div>\n      <button className=\"restart\" onClick={props.onClick}>\n        {props.buttonStatus}\n      </button>\n      <div className=\"lcd timer\">{leftPad(props.time)}</div>\n    </div>\n  );\n};\n","import React, {Component} from 'react';\nimport './Game.css';\nimport Board from './Board';\nimport Status from './Status';\n\nclass Game extends Component {\n  height = 9;\n  width = 9;\n  maximumMines = 10;\n\n  static randomInRange(minimum, maximum) {\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n  }\n\n  static isMine(squares, row, column) {\n    return squares[row][column] === '*';\n  }\n\n  static generateArray(height, width, value) {\n    return Array.from(\n      {length: height},\n      () => Array.from({length: width}, () => value)\n    )\n  }\n\n  static getSolution(game, solution, symbol) {\n    return game.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) =>\n          Game.isMine(solution, rowKey, squareKey) ? symbol : solution[rowKey][squareKey]\n      )\n    );\n  }\n\n  static thereAreRemainingMoves(squares, maximumMines) {\n    return squares.flat().filter(\n      sq => (sq === null || sq === '🚩')\n    ).length > maximumMines;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  getInitialState() {\n    this.stopTimer();\n\n    return {\n      solution: this.generateGame(this.height, this.width, this.maximumMines),\n      game: Game.generateArray(this.height, this.width, null),\n      gameFinished: false,\n      buttonStatus: '🙂',\n      minesLeft: this.maximumMines,\n      gameStarted: false,\n      time: 0,\n      start: 0,\n      bestTime: localStorage.getItem('bestTime'),\n    };\n  }\n\n  checkStart() {\n    if (!this.state.gameStarted) {\n      this.startTimer();\n    }\n  }\n\n  handleClick(row, column) {\n    let game = this.state.game.slice();\n    this.checkStart();\n\n    if (this.state.gameFinished || game[row][column] !== null) {\n      return;\n    }\n\n    this.reveal(game, row, column);\n\n    this.updateGameStatus(game, row, column);\n  }\n\n  handleRightClick(event, row, column) {\n    let game = this.state.game.slice();\n    event.preventDefault();\n    this.checkStart();\n\n    let value = game[row][column];\n    if (this.state.gameFinished\n      || (value !== null && value !== '🚩')) {\n      return;\n    }\n\n    game[row][column] = value ? null : '🚩';\n    const minesLeft = this.state.minesLeft + (game[row][column] ? -1 : 1);\n\n    this.setState({game, minesLeft});\n  }\n\n  reveal(game, row, column) {\n    if (!this.inRange(row, column) || game[row][column] !== null) {\n      return;\n    }\n\n    game[row][column] = this.state.solution[row][column];\n\n    if (game[row][column] === 0) {\n      this.expand(game, row, column);\n    }\n  }\n\n  expand(game, row, column) {\n    this.reveal(game, row - 1, column);\n    this.reveal(game, row + 1, column);\n    this.reveal(game, row, column - 1);\n    this.reveal(game, row, column + 1);\n    this.reveal(game, row - 1, column - 1);\n    this.reveal(game, row - 1, column + 1);\n    this.reveal(game, row + 1, column + 1);\n    this.reveal(game, row + 1, column - 1);\n  }\n\n  updateGameStatus(game, row, column) {\n    if (Game.isMine(game, row, column)) {\n      this.stopTimer();\n\n      game = game.map(\n        (row, rowKey) => row.map(\n          (square, squareKey) => {\n            const isMine = Game.isMine(this.state.solution, rowKey, squareKey);\n            if (square === '🚩') {\n              return isMine ? square : '❌';\n            }\n\n            return isMine ? '*' : square;\n          }\n        )\n      );\n\n      return this.setState({\n        game,\n        gameFinished: true,\n        buttonStatus: '💀',\n      });\n    }\n\n    const gameFinished = !Game.thereAreRemainingMoves(game, this.maximumMines);\n    const buttonStatus = gameFinished ? '😎' : this.state.buttonStatus;\n    let minesLeft = this.state.minesLeft;\n    let bestTime = this.state.bestTime;\n\n    if (gameFinished) {\n      this.stopTimer();\n      game = Game.getSolution(game, this.state.solution, '🚩');\n      minesLeft = 0;\n      bestTime = bestTime === null || (this.state.time < bestTime) ? this.state.time : bestTime;\n    }\n\n    if (bestTime !== this.state.bestTime) {\n      localStorage.setItem('bestTime', bestTime);\n    }\n\n    this.setState({game, gameFinished, buttonStatus, minesLeft, bestTime});\n  }\n\n  generateGame(height, width, maximumMines) {\n    const game = Game.generateArray(height, width, 0);\n    let generatedMines = 0;\n    let row;\n    let column;\n\n    while (generatedMines < maximumMines) {\n      row = Game.randomInRange(0, height - 1);\n      column = Game.randomInRange(0, width - 1);\n\n      if (!Game.isMine(game, row, column)) {\n        game[row][column] = '*';\n        this.incrementMinesNearby(game, row - 1, column);\n        this.incrementMinesNearby(game, row + 1, column);\n        this.incrementMinesNearby(game, row, column - 1);\n        this.incrementMinesNearby(game, row, column + 1);\n        this.incrementMinesNearby(game, row - 1, column - 1);\n        this.incrementMinesNearby(game, row - 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column - 1);\n        generatedMines++;\n      }\n    }\n\n    return game;\n  }\n\n  incrementMinesNearby(squares, row, column) {\n    if (this.inRange(row, column) && !Game.isMine(squares, row, column)) {\n      squares[row][column] = squares[row][column] + 1;\n    }\n  }\n\n  inRange(row, column) {\n    return row >= 0 && row < this.height\n      && column >= 0 && column < this.width;\n  }\n\n  startTimer() {\n    this.setState({\n      gameStarted: true,\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n    });\n    if (this.timer) {\n      this.stopTimer();\n    }\n    this.timer = setInterval(() => this.setState({\n      time: Math.floor((Date.now() - this.state.start) / 1000),\n    }), 1);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"wrapper\">\n          <Status\n            buttonStatus={this.state.buttonStatus}\n            minesLeft={this.state.minesLeft}\n            time={this.state.time}\n            onClick={() => this.setState(this.getInitialState())}\n          />\n        </div>\n        <Board\n          onClick={(row, column) => this.handleClick(row, column)}\n          onRightClick={(event, row, column) => this.handleRightClick(event, row, column)}\n          game={this.state.game}\n        />\n        <div className=\"bestScore\">\n          {this.state.bestTime !== null ? 'Best time: ' + this.state.bestTime : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Game is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game/>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}
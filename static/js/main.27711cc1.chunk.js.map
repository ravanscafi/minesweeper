{"version":3,"sources":["Square.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","value","onClick","onContextMenu","onRightClick","Board","row","column","_this","this","Square_Square","key","event","items","_this2","map","renderSquare","_this3","game","renderRow","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","height","width","maximumMines","initialState","getInitialState","bestTime","localStorage","getItem","state","stopTimer","solution","generateGame","generateArray","gameFinished","buttonStatus","minesLeft","gameStarted","time","start","startTimer","setState","slice","checkStart","reveal","updateGameStatus","preventDefault","objectSpread","squares","inRange","expand","isMine","rowKey","square","squareKey","thereAreRemainingMoves","getSolution","setItem","symbol","flat","filter","sq","length","minimum","maximum","Math","round","random","_this4","Array","from","generatedMines","randomInRange","incrementSquare","_this5","Date","now","timer","setInterval","floor","clearInterval","number","toString","padStart","_this6","leftPad","src_Board_0","handleClick","handleRightClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_Game_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27711cc1.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nexport default function Square(props) {\n  return (\n    <button\n      className={'Square '+(props.value === '*' ? 'mine' : (props.value !== null ? 'revealed number'+props.value : 'unrevealed'))}\n      onClick={props.onClick}\n      onContextMenu={props.onRightClick}\n    >\n      {props.value ? props.value : ''}\n    </button>\n  );\n};\n","import React, {Component} from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nclass Board extends Component {\n  renderSquare(row, column, value) {\n    return (\n      <Square\n        key={row + \"_\" + column}\n        value={value}\n        onClick={() => this.props.onClick(row, column)}\n        onRightClick={(event) => this.props.onRightClick(event, row, column)}\n      />\n    );\n  }\n\n  renderRow(row, items) {\n    return (\n      <div className=\"row\" key={row}>\n        {items.map((value, key) => this.renderSquare(row, key, value))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Board\">\n        {this.props.game.map((value, key) => this.renderRow(key, value))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport './Game.css';\nimport Board from './Board';\n\nclass Game extends Component {\n  height = 9;\n  width = 9;\n  maximumMines = 10;\n\n  constructor(props) {\n    super(props);\n    let initialState = this.getInitialState();\n    initialState.bestTime = localStorage.getItem('bestTime');\n    this.state = initialState;\n  }\n\n  getInitialState() {\n    this.stopTimer();\n\n    return {\n      solution: this.generateGame(),\n      game: this.generateArray(null),\n      gameFinished: false,\n      buttonStatus: '🙂',\n      minesLeft: this.maximumMines,\n      gameStarted: false,\n      time: 0,\n      start: 0,\n    };\n  }\n\n  checkStart() {\n    if (!this.state.gameStarted) {\n      this.startTimer();\n      this.setState({gameStarted: true});\n    }\n  }\n\n  handleClick(row, column) {\n    const game = this.state.game.slice();\n    this.checkStart();\n\n    if (this.state.gameFinished || game[row][column] !== null) {\n      return;\n    }\n\n    this.reveal(game, row, column);\n\n    this.updateGameStatus(game, row, column);\n  }\n\n  handleRightClick(event, row, column) {\n    const game = this.state.game.slice();\n    event.preventDefault();\n    this.checkStart();\n\n    let value = game[row][column];\n    if (this.state.gameFinished\n      || (value !== null && value !== '🚩')) {\n      return;\n    }\n\n    game[row][column] = value ? null : '🚩';\n    const minesLeft = this.state.minesLeft + (game[row][column] ? -1 : 1);\n\n    this.setState({...game, minesLeft});\n  }\n\n  reveal(squares, row, column) {\n    if (!this.inRange(row, column) || squares[row][column] !== null) {\n      return;\n    }\n\n    squares[row][column] = this.state.solution[row][column];\n\n    if (squares[row][column] === 0) {\n      this.expand(squares, row, column);\n    }\n  }\n\n  expand(squares, row, column) {\n    this.reveal(squares, row - 1, column);\n    this.reveal(squares, row + 1, column);\n    this.reveal(squares, row, column - 1);\n    this.reveal(squares, row, column + 1);\n    this.reveal(squares, row - 1, column - 1);\n    this.reveal(squares, row - 1, column + 1);\n    this.reveal(squares, row + 1, column + 1);\n    this.reveal(squares, row + 1, column - 1);\n  }\n\n  updateGameStatus(squares, row, column) {\n    if (this.isMine(squares, row, column)) {\n      this.stopTimer();\n\n      squares = squares.map(\n        (row, rowKey) => row.map(\n          (square, squareKey) => {\n            const isMine = this.isMine(this.state.solution, rowKey, squareKey);\n            if (square === '🚩') {\n              return isMine ? square : '❌';\n            }\n\n            return isMine ? '*' : square;\n          }\n        )\n      );\n\n      return this.setState({\n        game: squares,\n        gameFinished: true,\n        buttonStatus: '💀',\n      });\n    }\n\n    const gameFinished = !this.thereAreRemainingMoves(squares);\n    const buttonStatus = gameFinished ? '😎' : this.state.buttonStatus;\n    let minesLeft = this.state.minesLeft;\n    let bestTime = this.state.bestTime;\n\n    if (gameFinished) {\n      this.stopTimer();\n      squares = this.getSolution(squares, '🚩');\n      minesLeft = 0;\n      bestTime = bestTime === null || (this.state.time < bestTime) ? this.state.time : bestTime;\n    }\n\n    if (bestTime !== this.state.bestTime) {\n      localStorage.setItem('bestTime', bestTime);\n    }\n\n    this.setState({\n      game: squares,\n      gameFinished: gameFinished,\n      buttonStatus: buttonStatus,\n      minesLeft: minesLeft,\n      bestTime: bestTime,\n    });\n  }\n\n  getSolution(squares, symbol) {\n    return squares.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) =>\n          this.isMine(this.state.solution, rowKey, squareKey) ? symbol : this.state.solution[rowKey][squareKey]\n      )\n    );\n  }\n\n  thereAreRemainingMoves(squares) {\n    return squares.flat().filter(\n      sq => (sq === null || sq === '🚩')\n    ).length > this.maximumMines;\n  }\n\n  randomInRange(minimum, maximum) {\n    return Math.round(Math.random() * (maximum - minimum) + minimum);\n  }\n\n  generateArray(value) {\n    return Array.from(\n      {length: this.height},\n      () => Array.from({length: this.width}, () => value)\n    )\n  }\n\n  generateGame() {\n    const squares = this.generateArray(0);\n    let generatedMines = 0;\n    let row;\n    let column;\n\n    while (generatedMines < this.maximumMines) {\n      row = this.randomInRange(0, this.height - 1);\n      column = this.randomInRange(0, this.width - 1);\n\n      if (!this.isMine(squares, row, column)) {\n        squares[row][column] = '*';\n        this.incrementSquare(squares, row - 1, column);\n        this.incrementSquare(squares, row + 1, column);\n        this.incrementSquare(squares, row, column - 1);\n        this.incrementSquare(squares, row, column + 1);\n        this.incrementSquare(squares, row - 1, column - 1);\n        this.incrementSquare(squares, row - 1, column + 1);\n        this.incrementSquare(squares, row + 1, column + 1);\n        this.incrementSquare(squares, row + 1, column - 1);\n        generatedMines++;\n      }\n    }\n\n    return squares;\n  }\n\n  incrementSquare(squares, row, column) {\n    if (this.inRange(row, column) && !this.isMine(squares, row, column)) {\n      squares[row][column] = squares[row][column] + 1;\n    }\n  }\n\n  isMine(squares, row, column) {\n    return squares[row][column] === '*';\n  }\n\n  inRange(row, column) {\n    return row >= 0\n      && column >= 0\n      && row < this.height\n      && column < this.width;\n  }\n\n  startTimer() {\n    this.setState({\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n    });\n    if (this.timer) {\n      this.stopTimer();\n    }\n    this.timer = setInterval(() => this.setState({\n      time: Math.floor((Date.now() - this.state.start) / 1000),\n    }), 1);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  leftPad(number) {\n    return number.toString().padStart(3, '0');\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"wrapper\">\n          <div className=\"status\">\n            <div className=\"lcd minesLeft\">{this.leftPad(this.state.minesLeft)}</div>\n            <button className=\"restart\" onClick={() => this.setState(this.getInitialState())}>\n              {this.state.buttonStatus}\n            </button>\n            <div className=\"lcd timer\">{this.leftPad(this.state.time)}</div>\n          </div>\n        </div>\n        <Board\n          onClick={(row, column) => this.handleClick(row, column)}\n          onRightClick={(event, row, column) => this.handleRightClick(event, row, column)}\n          game={this.state.game}\n        />\n        <div className=\"bestScore\">{this.state.bestTime !== null ? 'Best time: '+this.state.bestTime : ''}</div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Game is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n serviceWorker.register();\n"],"sourceRoot":""}